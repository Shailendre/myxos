alias physical_sp S2;
physical_sp=([PTBR+2*(SP/512)]*512)+SP%512;

alias pcb_counter S0;
pcb_counter=READY_LIST;

// cheack for free pcb

while(pcb_counter < READY_LIST+1024)do
	if([pcb_counter+1]==0)then
		break;
	endif;
	pcb_counter=pcb_counter+32;
endwhile;

if(pcb_counter >= (READY_LIST+1024))then
	[physical_sp-2]=-1;
	ireturn;
endif;

alias child_pid S1;
child_pid=(pcb_counter-READY_LIST)/32;



alias count S3;
count=0;
alias count1 S4;
count1=0;

// count for no of valid page

while(count < 8)do
	if(([PTBR+count+1]=="01")||([PTBR+count+1]=="11"))then	
		count1=count1+1;
	endif;
	count=count+2;
endwhile;



alias memory_page S5;
memory_page=29;

//count no of free page
count=0;
while(memory_page+1280 < (1280+64))do
	if([1280+memory_page]==0)then
		count=count+1;
	endif;
	memory_page=memory_page+1;
endwhile;

if(count1 > count)then
	[physical_sp-2]=-1;
	ireturn;
endif;
//-------------step4	
alias PTBR_child S6;
PTBR_child=1024+child_pid*8;

alias flag S7;
flag=0;
count=0;
memory_page=29;
alias valid_page S8;
while([memory_page+1280] < (1280+64))do
	if(count > 6)then
		break;
	endif;

	if(([memory_page+1280]==0)&&(([PTBR+count+1]=="01") || ([PTBR+count+1]=="11")))then
		flag=1;
		
		valid_page=[PTBR+count];
		
		count1=0;
		// copy page
		while(count1 < 512)do
			[memory_page*512+count1]=[valid_page*512+count1];
			count1=count1+1;
		endwhile;
		[1280+memory_page]=1;    //used
		
	endif;

	if(flag==0)then
		[PTBR_child+count]=[PTBR+count];
	else
		[PTBR_child+count]=memory_page;
			
		memory_page=memory_page+1;  //search for next empty page;
	endif;
	
	[PTBR_child+count+1]=[PTBR+count+1];

	flag=0;
	count=count+2;
endwhile;

//------------ step 4
alias child_pcb S9;
child_pcb=READY_LIST+32*child_pid;
[child_pcb+6]=PTLR;
[child_pcb+5]=PTBR_child;
[child_pcb+4]=[physical_sp];  // set ip
[child_pcb+3]=SP-1;
[child_pcb+2]=BP;
[child_pcb+7]=R0;
[child_pcb+8]=R1;
[child_pcb+9]=R2;
[child_pcb+10]=R3;
[child_pcb+11]=R4;
[child_pcb+12]=R5;
[child_pcb+13]=R6;
[child_pcb+14]=R7;


alias parent_pid S10;
parent_pid=(PTBR-1024)/8;

alias parent_pcb S11;
parent_pcb=READY_LIST+32*parent_pid;

count=0;
alias system_wide_index S12;

while(count < 8)do
	[child_pcb+15+2*count]=[parent_pcb+15+2*count];
	[child_pcb+15+2*count+1]=[parent_pcb+15+2*count+1];	
	system_wide_index=[parent_pcb+15+2*count];
	if(system_wide_index > -1)then
		[FILE_TABLE+2*system_wide_index+1]=[FILE_TABLE+2*system_wide_index+1]+1; //increasing count;
	endif;
	count=count+1;
endwhile;

//print("test3");

[child_pcb+1]=1;
[child_pcb]=child_pid;

[physical_sp-2]=child_pid;

alias child_physical_sp S13;

child_physical_sp=([PTBR_child+2*((SP-1)/512)] *512)+(SP-1)%512;

[child_physical_sp-1]=-2;

ireturn;


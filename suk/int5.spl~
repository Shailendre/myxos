alias physicalSP S0;
physicalSP = ([PTBR + 2 *(SP / 512)] *512) + (SP%512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias ParentPID S2;
	ParentPID = (PTBR - 1024)/8;
		
alias memory_page S3;
	
alias Flag S4;
		
alias system_wide_index S5;
	system_wide_index = FILE_TABLE;

alias childPID S6;

alias count S7;
	count = 0;
	
alias valid_page S8;
	
alias ChildPTBR S9;
	ChildPTBR = 1024 + childPID * 8;

alias counter S10;
	counter = 0;
	
alias ChildSP S11;

alias physicalSPChild S12;

alias ChildPCB S13;
	ChildPCB = READY_LIST + 32*childPID;

alias ParentPCB S14;
	ParentPCB = READY_LIST + 32*ParentPID;
////................FORK SYSTEM CALL.................//

if(sysCallNo == 8) then
	
	while(count < 32) do
		if([READY_LIST + 32*count + 1] == 0) then
			//currentPCB = [READY_LIST + 32*count];
			//currentPID = count;
			childPID = count;
			ChildPTBR = 1024 + childPID * 8;
			ChildPCB = READY_LIST + 32*childPID;
			break;
		else
			count = count + 1;
		endif;
	endwhile;
	
	if(count == 32) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	count = 0;
	counter = 0;
	
//....... No of Pages In Parent Process...........//

	while(counter < 8) do
		if(([PTBR + counter + 1] == "01") || ([PTBR + counter +1] == "11")) then
		count = count + 1;
		endif;
		counter = counter + 2;
	endwhile;
	
	counter = 0;
	memory_page = 29;

//...........Free pages in the memory ...............//

	while((memory_page + 1280) < 1344) do
		if([memory_page + 1280] == 0) then
			counter = counter + 1;
		endif;
		memory_page = memory_page + 1;
	endwhile;

	if(count > counter) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	Flag = 0;
	count=0;
//........COPYING VALID PAGED FROM PARENT TO CHILD PAROCESS ..//

	memory_page = 29;
	while(count<8) do
		if(([memory_page + 1280] == 0) &&([PTBR + count + 1] == "01" || [PTBR + count + 1] == "11")) then
			Flag = 1;	
			valid_page = [PTBR + count];
			//print(memory_page);
			//print([PTBR+count]);
			counter = 0;
			
			//print("inside meme_page");
		
//..................COPYING..............//
		
			while(counter < 512) do
				[memory_page * 512 + counter] = [valid_page * 512+ counter];
				counter = counter + 1;
			endwhile;

			[memory_page + 1280] = 1; //USED
		endif;
	
		if(Flag == 0) then
			if([memory_page + 1280] != 0)then
				count=count-2;
				memory_page=memory_page+1;
			else
			[ChildPTBR + count] = [PTBR + count];
			endif;
		else
			[ChildPTBR + count] = memory_page;
			memory_page = memory_page + 1;
		endif;
	
		Flag = 0;
		count = count + 2;
		[ChildPTBR + count + 1] = [PTBR + count + 1];
		
	endwhile;
	
	

	ChildSP = SP -1;
	[ChildPCB + 0] = childPID;
	[ChildPCB + 2] = BP;
	[ChildPCB + 3] = ChildSP;
	[ChildPCB + 4] = [physicalSP];
	[ChildPCB + 5] = ChildPTBR;
	[ChildPCB + 6] = PTLR;
	[ChildPCB + 7]  = R0;
	[ChildPCB + 8]  = R1;
	[ChildPCB + 9]  = R2;
	[ChildPCB + 10] = R3;
	[ChildPCB + 11] = R4;
	[ChildPCB + 12] = R5;
	[ChildPCB + 13] = R6;
	[ChildPCB + 14] = R7;
	
	count = 0;
	
	
	while(count < 8) do
		[ChildPCB + 15 + count*2] = [ParentPCB + 15 + count*2];
		[ChildPCB + 15 + count*2 + 1] = [ParentPCB + 15 + count*2 + 1];
		system_wide_index = [ParentPCB + 15 + count*2];
		
		if(system_wide_index > -1) then
			[FILE_TABLE + system_wide_index*2 + 1] = [FILE_TABLE + system_wide_index*2 + 1] + 1;
		endif;
		count = count + 1;
	endwhile;
	
	
	[ChildPCB + 1] = 1;
	
	[physicalSP - 2]= childPID;
	
	physicalSPChild = ([ChildPTBR + 2 *(ChildSP / 512)] *512) + (ChildSP%512);

	[physicalSPChild - 1] = -2;
endif;

ireturn;
